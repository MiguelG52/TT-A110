// lib/temario.ts

export const temario = [
    {
        id: 1,
        icon: "üìò",
        title: "Clases y objetos en Java",
        description: "Aprende sobre las clases y los objetos en Java",
        content: `
En Java, las clases y los objetos son los bloques de construcci√≥n fundamentales del lenguaje. Java es un lenguaje orientado a objetos, lo que significa que el dise√±o de programas se basa en la creaci√≥n y manipulaci√≥n de objetos.

¬øQu√© es una Clase en Java?

Una clase en Java es una plantilla o modelo que define las propiedades (atributos) y comportamientos (m√©todos) de los objetos que se crean a partir de ella. Las clases son las definiciones de los tipos de objetos que pueden existir en el sistema.

Ejemplo de Declaraci√≥n de una Clase

public class Persona {
    // Atributos
    String nombre;
    int edad;

    // Constructor
    public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
    }

    // M√©todos
    public void saludar() {
        System.out.println("Hola, mi nombre es " + nombre);
    }
}

Explicaci√≥n del Ejemplo
- Atributos: La clase Persona tiene dos atributos: nombre y edad, que almacenan el estado de los objetos que se crean a partir de la clase.
- Constructor: Un constructor es un m√©todo especial que se usa para inicializar objetos. Aqu√≠, el constructor toma dos par√°metros para inicializar los atributos nombre y edad.
- M√©todos: El m√©todo saludar permite que los objetos de tipo Persona ejecuten una acci√≥n, en este caso, imprimir un mensaje en consola.

¬øQu√© es un Objeto en Java?

Un objeto es una instancia de una clase. Cuando se crea un objeto, se reserva memoria y se inicializan los atributos definidos en la clase.

Ejemplo de Creaci√≥n de un Objeto

public class Main {
    public static void main(String[] args) {
        // Crear un objeto de la clase Persona
        Persona persona1 = new Persona("Carlos", 25);
        persona1.saludar(); // Llamar al m√©todo del objeto
    }
}

Explicaci√≥n del Ejemplo

- Creaci√≥n del Objeto: Se usa la palabra clave new para crear un nuevo objeto de la clase Persona. El constructor se llama con los par√°metros "Carlos" y 25 para inicializar los atributos.
- Acceso a M√©todos: Luego de crear el objeto persona1, se llama al m√©todo saludar usando la notaci√≥n de punto (.).

Encapsulamiento

El encapsulamiento es una caracter√≠stica de la programaci√≥n orientada a objetos que oculta los detalles internos de una clase y expone solo lo necesario a trav√©s de m√©todos p√∫blicos.

Los atributos de una clase se suelen declarar como private para evitar el acceso directo desde fuera de la clase, y se proporcionan m√©todos get y set para acceder y modificar estos atributos.

Ejemplo de Encapsulamiento

public class Coche {
    // Atributo privado
    private String marca;

    // Constructor
    public Coche(String marca) {
        this.marca = marca;
    }

    // M√©todo getter
    public String getMarca() {
        return marca;
    }

    // M√©todo setter
    public void setMarca(String marca) {
        this.marca = marca;
    }
}

Explicaci√≥n

- Atributo privado: El atributo marca est√° declarado como private, lo que significa que no se puede acceder directamente desde fuera de la clase.
- M√©todos get y set: Los m√©todos getMarca() y setMarca() proporcionan una manera controlada de acceder y modificar el valor del atributo marca.

M√©todos en las Clases
Los m√©todos en las clases definen las acciones o comportamientos que los objetos pueden realizar. Los m√©todos pueden recibir par√°metros y devolver valores.

Ejemplo de M√©todos

public class Calculadora {
    // M√©todo para sumar dos n√∫meros
    public int sumar(int a, int b) {
        return a + b;
    }

    // M√©todo para restar dos n√∫meros
    public int restar(int a, int b) {
        return a - b;
    }
}

En este ejemplo, la clase Calculadora tiene dos m√©todos: sumar y restar, que realizan operaciones matem√°ticas simples.

Llamada a M√©todos

public class Main {
    public static void main(String[] args) {
        Calculadora calc = new Calculadora();
        int resultadoSuma = calc.sumar(5, 3);
        int resultadoResta = calc.restar(10, 4);

        System.out.println("Resultado de la suma: " + resultadoSuma);
        System.out.println("Resultado de la resta: " + resultadoResta);
    }
}

Constructores en Java
Un constructor es un tipo especial de m√©todo que se llama autom√°ticamente cuando se crea un objeto de una clase. El constructor se utiliza para inicializar el estado del objeto. En Java, si no se define un constructor, el compilador proporcionar√° uno por defecto.

Sobrecarga de Constructores
Java permite tener m√∫ltiples constructores con diferentes par√°metros, lo que se conoce como sobrecarga de constructores.

Ejemplo de Sobrecarga de Constructores

public class Persona {
    String nombre;
    int edad;

    // Constructor sin par√°metros
    public Persona() {
        this.nombre = "Desconocido";
        this.edad = 0;
    }

    // Constructor con par√°metros
    public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
    }
}

Explicaci√≥n

- Constructor sin par√°metros: Inicializa los atributos con valores predeterminados.
- Constructor con par√°metros: Permite inicializar los atributos con valores proporcionados por el usuario.

Tipos de M√©todos
Java soporta varios tipos de m√©todos seg√∫n su funcionalidad y comportamiento. A continuaci√≥n, se describen algunos tipos importantes de m√©todos.

M√©todos Est√°ticos
Un m√©todo est√°tico pertenece a la clase en s√≠, no a las instancias (objetos) de la clase. Se accede a ellos usando el nombre de la clase, en lugar de un objeto.

M√©todos de Instancia
Los m√©todos de instancia dependen de los objetos de la clase y necesitan ser llamados a trav√©s de una instancia.

Ejemplo Completo: Clases y Objetos en Java

A continuaci√≥n, un ejemplo completo que muestra c√≥mo definir una clase, crear objetos y utilizar sus m√©todos.

public class Animal {
    String nombre;
    String especie;

    // Constructor
    public Animal(String nombre, String especie) {
        this.nombre = nombre;
        this.especie = especie;
    }

    // M√©todo para describir el animal
    public void describir() {
        System.out.println("Soy un " + especie + " y me llamo " + nombre);
    }

    public static void main(String[] args) {
        // Crear un objeto de la clase Animal
        Animal perro = new Animal("Max", "perro");
        perro.describir(); // Llamar al m√©todo
    }
}

`,
        videoUrl: "https://www.youtube.com/watch?v=SI7O81GMG2A",
    },
    {
        id: 2,
        icon: "üìï",
        title: "Relaciones entre clases",
        description: "Aprende como estas relaciones definen c√≥mo interact√∫an y se conectan las clases entre s√≠.",
        content: `
En la programaci√≥n orientada a objetos, las clases no siempre trabajan solas. Muchas veces se relacionan entre s√≠ para construir soluciones m√°s completas. Estas relaciones permiten que los objetos se comuniquen, compartan informaci√≥n o incluso se construyan unos con otros.

Asociaci√≥n, Agregaci√≥n y Composici√≥n
Estas tres son formas de conectar clases, pero cada una tiene un nivel diferente de dependencia.

Asociaci√≥n
Es una relaci√≥n general entre dos clases. Por ejemplo, un Profesor puede estar asociado a un Curso.

class Profesor {
    String nombre;
}

class Curso {
    Profesor profesor;
}

Ambas clases pueden existir de forma independiente.

Agregaci√≥n
Es un tipo de asociaci√≥n donde una clase contiene a otra, pero cada una puede vivir por separado.

class Estudiante {
    String nombre;
}

class Curso {
    List<Estudiante> estudiantes;
}

Si el Curso se elimina, los Estudiantes pueden seguir existiendo.

Composici√≥n
Es una relaci√≥n m√°s fuerte: una clase es due√±a de otra. Si la clase principal desaparece, tambi√©n lo hacen sus componentes.

class Motor {
    void encender() { ... }
}

class Auto {
    Motor motor = new Motor();
}

Si elimin√°s el Auto, el Motor tambi√©n desaparece.

Herencia Simple
La herencia permite que una clase herede atributos y m√©todos de otra. Con herencia simple, una clase solo hereda de una √∫nica clase base.

class Animal {
    void dormir() { ... }
}

class Perro extends Animal {
    void ladrar() { ... }
}

Perro hereda de Animal, as√≠ que tambi√©n puede dormir().

La herencia se usa para reutilizar c√≥digo y modelar relaciones "es un tipo de".

Herencia M√∫ltiple
La herencia m√∫ltiple significa que una clase puede heredar de m√°s de una clase base. En lenguajes como Java, esto no est√° permitido con clases, pero s√≠ se puede hacer usando interfaces.

interface Nadador {
    void nadar();
}

interface Volador {
    void volar();
}

class Pato implements Nadador, Volador {
    public void nadar() { ... }
    public void volar() { ... }
}

Pato hereda el comportamiento de Nadador y Volador al mismo tiempo.
`,
        videoUrl: "https://www.youtube.com/watch?v=U9-iM-gA7-E",
    },
    {
        id: 3,
        icon: "üìó",
        title: "Manejo de excepciones",
        description: "Aprende sobre como manejar los errores que puede producir al ejecutar el c√≥digo.",
        content: `
En Java, las excepciones son eventos que interrumpen el flujo normal de un programa debido a errores o situaciones inesperadas. El manejo adecuado de excepciones permite que los programas sean m√°s robustos y puedan recuperarse de errores sin finalizar abruptamente.

Jerarqu√≠a de Excepciones
Todas las excepciones en Java derivan de la clase base Throwable, que se divide en dos subclases principales:

Error: Representa errores graves del sistema que generalmente no pueden ser manejados por la aplicaci√≥n, como OutOfMemoryError.
Studocu

Exception: Representa condiciones que una aplicaci√≥n puede manejar. A su vez, se divide en:

Excepciones comprobadas (Checked Exceptions): El compilador obliga a manejarlas expl√≠citamente, ya sea mediante bloques try-catch o declarando su propagaci√≥n con throws. Ejemplo: IOException.

Excepciones no comprobadas (Unchecked Exceptions): No es obligatorio manejarlas expl√≠citamente. Derivan de RuntimeException. Ejemplo: NullPointerException.

Esta jerarqu√≠a permite organizar y manejar las excepciones de manera estructurada.

Excepciones Encadenadas
A veces, una excepci√≥n ocurre como resultado directo de otra. Java permite encadenar excepciones para preservar la causa original del error. Esto es √∫til para diagnosticar problemas complejos.

Ejemplo:

try {
    // C√≥digo que puede lanzar IOException
} catch (IOException e) {
    throw new CustomException("Error al procesar el archivo", e);
}

En este ejemplo, CustomException encapsula la IOException original, permitiendo acceder a la causa ra√≠z mediante m√©todos como getCause().

Declaraci√≥n de Nuevos Tipos de Excepciones
Java permite crear excepciones personalizadas para representar errores espec√≠ficos de una aplicaci√≥n. Para ello, se define una nueva clase que extiende Exception o RuntimeException, seg√∫n se desee que sea una excepci√≥n comprobada o no comprobada.

Ejemplo:

public class MiExcepcionPersonalizada extends Exception {
    public MiExcepcionPersonalizada(String mensaje) {
        super(mensaje);
    }
}

Esta pr√°ctica mejora la claridad y especificidad en el manejo de errores dentro de una aplicaci√≥n.


`,
        videoUrl: "https://www.youtube.com/watch?v=VHy6xFXJ1Rw",

    },
    {
        id: 4,
        icon: "üìö",
        title: "Polimorfismo",
        description: "Define m√∫ltiples constructores para flexibilidad.",
        content: `
El polimorfismo es uno de los pilares fundamentales de la Programaci√≥n Orientada a Objetos (POO), junto con la herencia y el encapsulamiento. En Java, el polimorfismo permite que un objeto de una clase se comporte de diferentes maneras dependiendo del contexto.

El polimorfismo mejora la flexibilidad y reutilizaci√≥n del c√≥digo, lo que hace que los programas sean m√°s extensibles y f√°ciles de mantener.

¬øQu√© es el Polimorfismo?
El polimorfismo significa ‚Äúmuchas formas‚Äù, y en Java, se refiere a la capacidad de un objeto de adoptar diferentes formas. A trav√©s de la herencia y la sobrescritura de m√©todos, un objeto puede comportarse de diferentes maneras seg√∫n su tipo en tiempo de ejecuci√≥n. Hay dos tipos principales de polimorfismo en Java:

1. Polimorfismo en tiempo de compilaci√≥n (sobrecarga): Ocurre cuando se define m√°s de un m√©todo con el mismo nombre pero diferentes par√°metros dentro de una clase.
2. Polimorfismo en tiempo de ejecuci√≥n (sobrescritura): Se refiere a la capacidad de un m√©todo sobrescrito para ser invocado en tiempo de ejecuci√≥n seg√∫n el tipo del objeto.

Diferencia entre Sobrecarga y Sobrescritura

- Sobrecarga: El m√©todo tiene el mismo nombre pero diferentes par√°metros dentro de la misma clase (polimorfismo en tiempo de compilaci√≥n).
- Sobrescritura: Una subclase redefine un m√©todo heredado de la superclase con la misma firma (polimorfismo en tiempo de ejecuci√≥n).

Ventajas del Polimorfismo

- Flexibilidad: Puedes escribir c√≥digo que trabaje con la superclase, pero en tiempo de ejecuci√≥n, los objetos se comportar√°n seg√∫n su clase real.
- Reutilizaci√≥n de C√≥digo: Evita la duplicaci√≥n de c√≥digo, ya que las subclases pueden sobrescribir el comportamiento sin reescribir todo el c√≥digo de la superclase.
- Extensibilidad: Facilita la ampliaci√≥n del sistema, ya que puedes agregar nuevas clases sin cambiar el c√≥digo existente que utiliza la superclase.

Clases Abstractas y Polimorfismo

Las clases abstractas son una caracter√≠stica importante de la programaci√≥n orientada a objetos en Java. Una clase abstracta es una clase que no se puede instanciar directamente y se utiliza como base para otras clases. Una clase abstracta puede tener m√©todos abstractos, que son m√©todos que no tienen una implementaci√≥n y deben ser implementados por las clases que heredan de la clase abstracta.

Las clases abstractas tambi√©n juegan un papel importante en la implementaci√≥n del polimorfismo. Una clase abstracta puede tener m√©todos abstractos (sin implementaci√≥n), que las subclases deben sobrescribir, permitiendo comportamientos espec√≠ficos en cada subclase.

Ejemplo de Polimorfismo con Clases Abstractas

// Clase abstracta
abstract class Forma {
    abstract void dibujar();
}

// Subclase 1
class Circulo extends Forma {
    @Override
    public void dibujar() {
        System.out.println("Dibujando un c√≠rculo.");
    }
}

// Subclase 2
class Cuadrado extends Forma {
    @Override
    public void dibujar() {
        System.out.println("Dibujando un cuadrado.");
    }
}

public class Main {
    public static void main(String[] args) {
        Forma forma1 = new Circulo();  // Polimorfismo
        Forma forma2 = new Cuadrado(); // Polimorfismo

        forma1.dibujar(); // Llama al m√©todo dibujar() de Circulo
        forma2.dibujar(); // Llama al m√©todo dibujar() de Cuadrado
    }
}

Explicaci√≥n:

- Forma: Es una clase abstracta que define el m√©todo abstracto dibujar().
- Circulo y Cuadrado: Son subclases que proporcionan implementaciones espec√≠ficas del m√©todo dibujar().
- Polimorfismo: El tipo de referencia es Forma, pero el comportamiento es determinado por la clase concreta (Circulo o Cuadrado).

Variables y Funciones Polim√≥rficas
En Java, una variable polim√≥rfica es aquella que puede referirse a objetos de diferentes tipos, siempre que estos sean subtipos de la clase o interfaz declarada. Esto permite escribir c√≥digo m√°s flexible y reutilizable.
Studocu

Ejemplo:

Animal miAnimal = new Perro();
miAnimal.hacerSonido(); // Llama al m√©todo de la clase Perro

En este ejemplo, aunque miAnimal es de tipo Animal, se comporta como un Perro en tiempo de ejecuci√≥n. Esto es posible gracias al enlace din√°mico, donde la llamada al m√©todo se resuelve en tiempo de ejecuci√≥n.
`,
        videoUrl: "https://www.youtube.com/watch?v=EFL2U4MsNZw",
    },
    {
        id: 5,
        icon: "üìò",
        title: "Programaci√≥n Orientada a Objetos Avanzada",
        description: "Aprende temas un tanto m√°s avanzados en Programaci√≥n Orientada a Objetos Avanzada",
        content: `
En esta secci√≥n vas a descrubrir herramientas m√°s avanzadas de la Programaci√≥n Orientada a Objetos que te va a permitir escribir c√≥digo m√°s limpio, modular y reutilizable.

Clases anidadas en Java

El anidamiento de una clase tiene por objetivo favorecer el encapsulamiento. Una clase anidada se dice que es interna si se la declara dentro de otra clase pero fuera de cualquier m√©todo de la clase contenedora.

Puede declararse con cualquiera de los modificadores: private, protected o public.

Una caracter√≠stica fundamental es que una clase interna tiene acceso a todos los atributos de la clase que la contiene, luego para que exista una clase anidada interna es necesario que exista un objeto de la clase contenedora.

El uso adecuado de clases anidadas en Java puede mejorar la modularidad y la organizaci√≥n del c√≥digo, as√≠ como facilitar la implementaci√≥n de ciertos patrones de dise√±o, como el patr√≥n Strategy o el patr√≥n Observer. Sin embargo, es importante tener en cuenta que un mal uso de clases anidadas puede complicar la compresi√≥n del c√≥digo y aumentar la complejidad, por lo que se debe utilizar con moderaci√≥n y siempre con el objetivo de mejorar la estructura y la claridad del c√≥digo.
        `,
        videoUrl: "https://www.youtube.com/watch?v=4GS-ZsdEW8w",
    },
    {
        id: 6,
        icon: "üìï",
        title: "Java Constructores this() y super()",
        description: "Static Method vs instance method",
        content: `
Las palabras reservadas this y super de Java nos sirven para poder acceder a los atributos, m√©todos y constructores de la clase en la que se encuentran y de la clase padre respectivamente.

Las palabras reservadas this y super de Java nos sirven para poder acceder a los atributos, m√©todos y constructores de la clase en la que se encuentran y de la clase padre respectivamente.

This en java
This hace referencia al objeto actual de la clase, es decir, a una instancia concreta de la clase y nos sirve para usar los m√©todos y atributos de esa clase desde alguno de sus m√©todos, para llamar a otro de sus constructores o simplemente para pasarle el objeto completo a alg√∫n otro m√©todo u objeto.

Aunque normalmente podemos omitir el this cuando hacemos una llamada a un m√©todo o atributo de la misma clase ya que el compilador sabe que pertenece a la clase desde la que se usa porque si no ese m√©todo o atributo deber√≠a de llevar delante el nombre del objeto al que se refiere, si lo usamos el c√≥digo puede ser un poco m√°s claro y nos evitamos problemas si alguien crea una variable con el mismo nombre que uno de los atributos de la clase, porque en este caso s√≠ que es necesario usar el this para acceder a la variable de la clase ya que la variable local ¬´oculta¬ª a la de clase.

Por eso normalmente siempre veremos el this. delante de los atributos en los constructores y en los setters ya que lo normal es que los par√°metros tengan los mismos nombres que los atributos de la clase, mientras que en los getters no se suele poner porque no hay ninguna duda de a que es a lo que estamos accediendo.

Super en java
Si this nos sirve para hacer referencia a la instancia actual del objeto, super nos sirve para hacer lo propio con la clase padre de nuestro objeto (la clase de la se hace el extends), vamos que nos permite acceso a los constructores, m√©todos y atributos de la clase de la que hereda.

Constructor this()
Cuando una clase tiene varios constructores podemos usar this() para hacer uso de otro de los constructores de la clase y de este modo nos ahorramos tener que repetir el mismo c√≥digo en todos los constructores y as√≠ solo necesitamos hacer una llamada a otro constructor y a√±adir el c√≥digo necesario para las diferencias.

Si se llama a otro constructor con this() siempre hay que hacerlo desde la primera l√≠nea del constructor (la primera l√≠nea de c√≥digo, delante puede haber comentario o l√≠neas en blanco) porque si intentamos hacerlo despu√©s de otra l√≠nea nuestro IDE nos mostrar√° un error como este Constructor call must be the first statement in a constructor, y no nos compilar√°.

HomeJavaThis y super en Java
This y super en JavaJava  31 octubre, 2018  0  Iv√°n Salas 
reset css
Las palabras reservadas this y super de Java nos sirven para poder acceder a los atributos, m√©todos y constructores de la clase en la que se encuentran y de la clase padre respectivamente.

This en java
This hace referencia al objeto actual de la clase, es decir, a una instancia concreta de la clase y nos sirve para usar los m√©todos y atributos de esa clase desde alguno de sus m√©todos, para llamar a otro de sus constructores o simplemente para pasarle el objeto completo a alg√∫n otro m√©todo u objeto.

Aunque normalmente podemos omitir el this cuando hacemos una llamada a un m√©todo o atributo de la misma clase ya que el compilador sabe que pertenece a la clase desde la que se usa porque si no ese m√©todo o atributo deber√≠a de llevar delante el nombre del objeto al que se refiere, si lo usamos el c√≥digo puede ser un poco m√°s claro y nos evitamos problemas si alguien crea una variable con el mismo nombre que uno de los atributos de la clase, porque en este caso s√≠ que es necesario usar el this para acceder a la variable de la clase ya que la variable local ¬´oculta¬ª a la de clase.

Por eso normalmente siempre veremos el this. delante de los atributos en los constructores y en los setters ya que lo normal es que los par√°metros tengan los mismos nombres que los atributos de la clase, mientras que en los getters no se suele poner porque no hay ninguna duda de a que es a lo que estamos accediendo.


package thisysuper;

public class Archivo {
    private String nombre;
    private String extension;
    private String ruta;
        
    public Archivo(String nombre, String extension) {
        this.nombre = nombre;
        this.extension = extension;
        this.ruta = "";
    }

    public Archivo(String nombre, String extension, String ruta) {
        this(nombre, extension);
        this.ruta = ruta;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getExtension() {
        return extension;
    }

    public void setExtension(String extension) {
        this.extension = extension;
    }

    public String getRuta() {
        return ruta;
    }

    public void setRuta(String ruta) {
        this.ruta = ruta;
    }

    @Override
    public String toString() {
        return this.getRuta() + this.getNombre() + "." + this.getExtension();
    }

}
En el c√≥digo anterior tambi√©n podemos ver como this tambi√©n se puede usar para llamar a otro de los constructores de la clase.

Super en java
Si this nos sirve para hacer referencia a la instancia actual del objeto, super nos sirve para hacer lo propio con la clase padre de nuestro objeto (la clase de la se hace el extends), vamos que nos permite acceso a los constructores, m√©todos y atributos de la clase de la que hereda.


package thisysuper;

import java.awt.Dimension;

public class Imagen extends Archivo {
    private Integer ancho;
    private Integer alto;

    public Imagen(String nombre, String extension, String ruta) {
        super(nombre, extension, ruta);
        this.ancho = 1920;
        this.alto = 1080;
    }

    public Imagen(String nombre, String extension, String ruta, Integer ancho, Integer alto) {
        this.ancho = ancho;
        this.alto = alto;
    }

    public Imagen(String nombre, String extension, String ruta, Dimension dimensiones) {
        this(nombre, extension, ruta, dimensiones.width, dimensiones.height);
    }

    public Integer getAncho() {
        return ancho;
    }

    public void setAncho(Integer ancho) {
        this.ancho = ancho;
    }

    public Integer getAlto() {
        return alto;
    }

    public void setAlto(Integer alto) {
        this.alto = alto;
    }

    @Override
    public String toString() {
        return super.toString() + ", Dimensiones: " + this.ancho + " X " + this.alto;
    }

}
En este ejemplo vemos como en el m√©todo toString() usamos el super para hacer la llamada al m√©todo del padre, aunque en este caso estamos haciendo la llamada al m√©todo con el mismo nombre del padre no existe nada que nos impida llamar a otro de sus m√©todos o a todos los que queramos.


public class Main {

    public static void main(String[] args) {
        Archivo imagen1 = new Imagen("foto", "png", "/home/ivan/Documents/Proyecto/");
        System.out.println(imagen1.toString());
        // /home/ivan/Documents/Proyecto/foto.png, Dimensiones: 1920 X 1080
    }
}
Como el toString() de la clase Imagen llama al de la clase Archivo y luego le concatena los valores de los atributos de la clase imagen el resultado final es nombre del archivo junto con las dimensiones.

Tambi√©n tenemos un ejemplo de una llamada a uno de los constructores de la clase padre desde uno de los constructores para inicializar las propiedades de la clase padre al crear una nueva instancia de la clase hija (en realidad, se est√° llamando a 2 de los constructores de la clase padre, pero eso lo veremos m√°s adelante).

En este caso no podemos acceder directamente a las propiedades de la clase padre con super. porque las declaramos como privadas y super solo nos permite acceder a los m√©todos y atributos declarados como public o protected, es decir que no nos otorga ning√∫n privilegio de acceso extra.

Constructor this()
Cuando una clase tiene varios constructores podemos usar this() para hacer uso de otro de los constructores de la clase y de este modo nos ahorramos tener que repetir el mismo c√≥digo en todos los constructores y as√≠ solo necesitamos hacer una llamada a otro constructor y a√±adir el c√≥digo necesario para las diferencias.

Si se llama a otro constructor con this() siempre hay que hacerlo desde la primera l√≠nea del constructor (la primera l√≠nea de c√≥digo, delante puede haber comentario o l√≠neas en blanco) porque si intentamos hacerlo despu√©s de otra l√≠nea nuestro IDE nos mostrar√° un error como este Constructor call must be the first statement in a constructor, y no nos compilar√°.

Por ejemplo podr√≠amos tener estos 4 constructores donde tenemos un constructor sin par√°metros que rellena los atributos con los valores por defecto y un constructor con un par√°metro, otro con 2 y otro con los 3 y cada uno de ellos llama al constructor que tiene un par√°metro menos.


public Archivo() {
    this.nombre = "archivo";
    this.extension = "txt";
    this.ruta = "";
}

public Archivo(String nombre) {
    this();
    this.nombre = nombre;
}
    
public Archivo(String nombre, String extension) {
    this(nombre);
    this.extension = extension;
}
    
public Archivo(String nombre, String extension, String ruta) {
    this(nombre, extension);
    this.ruta = ruta;
}
Como la llamada desde cada constructor a otro de los constructores de la clase se hace en la primera l√≠nea en el caso de nuestro ejemplo primero se llama al constructor sin par√°metros, luego al que tiene 1, despu√©s al que tiene 2 y finalmente al que tiene 3 y por lo tanto siempre conseguimos inicializar nuestro objeto correctamente.


public class Main {

    public static void main(String[] args) {
        Archivo archivo1 = new Archivo();
        System.out.println(archivo1.toString());
        // archivo.txt

        Archivo archivo2= new Archivo("lista_compra");
        System.out.println(archivo2.toString());
        // lista_compra.txt

        Archivo archivo3 = new Archivo("lista_compra", "doc");
        System.out.println(archivo3.toString());
        // lista_compra.doc

        Archivo archivo4 = new Archivo("lista_compra", "doc", "/home/ivan/Documents/");
        System.out.println(archivo4.toString());
        // /home/ivan/Documents/lista_compra.doc
    }
}
Constructor super()
Si una clase hereda de otra sus constructores en su primera l√≠nea siempre tienen que llamar a alguno de los constructores de clase padre con super() o a otro de sus constructores con this() de forma que al final siempre se llame a alguno de los constructores de la clase padre.

Si la clase padre tiene un constructor sin par√°metros entonces no es necesario hacer la llamada con super() porque por defecto Java hace la llamada al constructor sin par√°metros de la clase padre, que es lo que sucede con este constructor.
`,
        videoUrl: "https://www.youtube.com/watch?v=p1GLnII4W2I&pp=ygUfY29uc3RydWN0b3JlcyB0aGlzIHkgc3VwZXIgamF2YQ%3D%3D",
    },
    {
        id: 7,
        icon: "üìó",
        title: "Sobre escritura de m√©todos (@Override)",
        description: "Sobre escritura de m√©todos (@Override)",
        content: `
¬øQu√© es @Override en Java?
@Override en Java es una anotaci√≥n que se usa para dejar claro que un m√©todo en una clase hija est√° reemplazando o modificando el comportamiento de un m√©todo que ya existe en su clase padre. En otras palabras, con esta anotaci√≥n te aseguras de que realmente est√°s sobrescribiendo un m√©todo que ya existe y no creando uno nuevo por equivocaci√≥n.

Te servir√° mucho, ya que sin darte cuenta podr√≠as cometer errores como cambiar el nombre del m√©todo o equivocarte en los par√°metros. Cuando esto pasa, el compilador no sabr√≠a que est√°s intentando sobrescribir el m√©todo, lo que puede llevar a errores en el programa que son complicados de identificar.

¬øPor qu√© usar siempre @Override en Java?
Existen unas ventajas t√©cnicas que te dar√° el uso constante de @Override en Java:

Evita errores de sobreescritura: Cuando no usas esta anotaci√≥n, corres el riesgo de sobrecargar un m√©todo en lugar de sobrescribirlo. Esto genera que el m√©todo de la clase padre se siga utilizando y, por ende, se producen resultados incorrectos o inesperados en tu aplicaci√≥n.
Mejora la legibilidad del c√≥digo: Al usar @Override, cualquier persona que lea tu c√≥digo sabr√° que ese m√©todo pertenece a una jerarqu√≠a de clases y que ha sido sobrescrito para proporcionar un comportamiento espec√≠fico.
Facilita la depuraci√≥n: En el momento en el que trabajes con m√∫ltiples clases y jerarqu√≠as complejas, tener esta anotaci√≥n te ayudar√° a identificar r√°pidamente si un m√©todo est√° sobrescrito y desde qu√© clase padre proviene.
Ejemplo pr√°ctico de @Override en Java
En este ejemplo vas a crear un programa en el que diferentes animales hacen distintos sonidos. Tienes una clase base llamada Animal, y luego dos clases hijas: Perro y Gato, cada una sobrescribiendo el m√©todo hacerSonido() de la clase padre.

C√≥digo de las clases
// Clase base
package com.ejemplo;

public class Animal {
    public void hacerSonido() {
        System.out.println("El animal hace un sonido");
    }
}
En este caso, tienes un m√©todo hacerSonido() en la clase Animal que imprime un mensaje gen√©rico. Ahora, vas a crear las clases hijas Perro y Gato que sobrescriben ese m√©todo para hacer un sonido espec√≠fico.

// Clase hija Perro
package com.ejemplo;

public class Perro extends Animal {
    @Override
    public void hacerSonido() {
        System.out.println("El perro ladra: ¬°Guau!");
    }
}

// Clase hija Gato
package com.ejemplo;

public class Gato extends Animal {
    @Override
    public void hacerSonido() {
        System.out.println("El gato ma√∫lla: ¬°Miau!");
    }
}
Puedes ver que ya sobrescribiste el m√©todo hacerSonido() en ambas clases hijas. El perro ahora ladra y el gato ma√∫lla, pero todo sigue dependiendo del m√©todo definido en la clase Animal.

¬øPor qu√© @Override no es opcional?
La mayor√≠a de los desarrolladores piensan que no pasar√° nada si no usan @Override. Sin embargo, ya viste que pueden surgir problemas serios en la gesti√≥n de clases y en la l√≥gica de tu programa.

Ventajas de usar @Override
Detecci√≥n temprana de errores: Si cometes un error tipogr√°fico en el nombre de un m√©todo o en sus par√°metros, el compilador te advertir√° de inmediato que no est√°s sobrescribiendo ning√∫n m√©todo, evitando as√≠ bugs potenciales.
Claridad y mantenimiento: Con @Override en Java, tu c√≥digo ser√° m√°s legible y f√°cil de mantener, ya que los futuros desarrolladores (o t√∫ mismo) podr√°n entender r√°pidamente qu√© m√©todos est√°n sobrescritos.
Facilita el refactoring: Si en alg√∫n momento decides cambiar la estructura de tus clases, la presencia de @Override te ayudar√° a identificar f√°cilmente qu√© m√©todos se ven afectados por esos cambios.
        `,
        videoUrl: "https://www.youtube.com/watch?v=14Bo_fNtLZY",
    },
    {
        id: 8,
        icon: "üìò",
        title: "Principios SOLID y buenas pr√°cticas",
        description: "SOLID",
        content: `Los Principios SOLID tienen cinco principios de dise√±o de clases Orientado a Objetos. Son un conjunto de reglas y mejores pr√°cticas a seguir al dise√±ar una estructura de clase.

Estos cinco principios nos ayudan a comprender la necesidad de ciertos patrones de dise√±o y arquitectura de software en general. As√≠ que creo que es un tema que todo desarrollador deber√≠a aprender.

Siguiendo el acr√≥nimo ingl√©s SOLID, son:

- El Principio de responsabilidad √∫nica (Single Responsibility Principle)
- El Principio Abierto-Cerrado (Open-Closed Principle)
- El Principio de sustituci√≥n de Liskov (Liskov Substitution Principle)
- El Principio de segregaci√≥n de interfaz (Interface Segregation Principle)
- El Principio de inversi√≥n de dependencia (Dependency Inversion Principle)

Principio de responsabilidad √∫nica

El Principio de Responsabilidad √önica dice que una clase debe hacer una cosa y, por lo tanto, debe tener una sola raz√≥n para cambiar.

Para enunciar este principio m√°s t√©cnicamente: Solo un cambio potencial (l√≥gica de base de datos, l√≥gica de registro, etc.) en la especificaci√≥n del software deber√≠a poder afectar la especificaci√≥n de la clase.

Esto significa que si una clase es un contenedor de datos, como una clase Libro o una clase Estudiante, y tiene algunos campos relacionados con esa entidad, deber√≠a cambiar solo cuando cambiamos el modelo de datos.

Es importante seguir el principio de responsabilidad √∫nica. En primer lugar, debido a que muchos equipos diferentes pueden trabajar en el mismo proyecto y editar la misma clase por diferentes motivos, esto podr√≠a dar lugar a m√≥dulos incompatibles.

En segundo lugar, facilita el control de versiones. Por ejemplo, digamos que tenemos una clase de persistencia que maneja las operaciones de la base de datos y vemos un cambio en ese archivo en las confirmaciones de GitHub. Al seguir el PRU, sabremos que est√° relacionado con el almacenamiento o con cosas relacionadas con la base de datos.

Los conflictos de fusi√≥n son otro ejemplo. Aparecen cuando diferentes equipos modifican el mismo archivo. Pero si se sigue el PRU, aparecer√°n menos conflictos: los archivos tendr√°n una sola raz√≥n para cambiar y los conflictos que existen ser√°n m√°s f√°ciles de resolver.

Trampas comunes y Anti-patrones
En esta secci√≥n, veremos algunos errores comunes que violan el Principio de Responsabilidad √önica. Luego hablaremos sobre algunas formas de solucionarlos.

Veremos el c√≥digo de un programa simple de facturaci√≥n de librer√≠a como ejemplo. Comencemos definiendo una clase de libro para usar en nuestra factura.

class Libro {
	String nombre;
	String nombreAutor;
	int anyo;
	int precio;
	String isbn;

	public Libro(String nombre, String nombreAutor, int anyo, int precio, String isbn) {
		this.nombre = nombre;
		this.nombreAutor = nombreAutor;
		this.anyo = anyo;
        this.precio = precio;
		this.isbn = isbn;
	}
}
Esta es una clase de libro simple con algunos campos. Nada sofisticado. No estoy haciendo que los campos sean privados para que no tengamos que lidiar con getters y setters y podamos centrarnos en la l√≥gica.

Ahora vamos a crear la clase de factura que contendr√° la l√≥gica para crear la factura y calcular el precio total. Por ahora, suponga que nuestra librer√≠a solo vende libros y nada m√°s.

public class Factura {

	private Libro libro;
	private int cantidad;
	private double tasaDescuento;
	private double tasaImpuesto;
	private double total;

	public Factura(Libro libro, int cantidad, double tasaDescuento, double tasaImpuesto) {
		this.libro = libro;
		this.cantidad = cantidad;
		this.tasaDescuento = tasaDescuento;
		this.tasaImpuesto = tasaImpuesto;
		this.total = this.calculaTotal();
	}

	public double calculaTotal() {
	        double precio = ((libro.precio - libro.precio * tasaDescuento) * this.cantidad);

		double precioConImpuestos = precio * (1 + tasaImpuesto);

		return precioConImpuestos;
	}

	public void imprimeFactura() {
            System.out.println(cantidad + "x " + libro.nombre + " " +          libro.precio + "$");
            System.out.println("Tasa de Descuento: " + tasaDescuento);
            System.out.println("Tasa de Impuesto: " + tasaImpuesto);
            System.out.println("Total: " + total);
	}

        public void guardarArchivo(String nombreArchivo) {
	// Crea un archivo con el nombre dado y escribe la factura.
	}

}
Aqu√≠ est√° nuestra clase de Factura. Tambi√©n contiene algunos campos sobre facturaci√≥n y 3 m√©todos:

calculaTotal m√©todo que calcula el precio total,
imprimeFactura m√©todo que deber√≠a imprimir la factura por consola, y
guardaArchivo m√©todo responsable de escribir la factura en un archivo.
Debe darse un segundo para pensar en lo que est√° mal con este dise√±o de clase antes de leer el siguiente p√°rrafo.

Bien, entonces, ¬øqu√© est√° pasando aqu√≠? Nuestra clase viola el Principio de Responsabilidad √önica de m√∫ltiples maneras.

La primera violaci√≥n es el m√©todo imprimeFactura, el cual contiene nuestra l√≥gica de impressi√≥n. El PRU establece que nuestra clase solo deber√≠a tener una √∫nica raz√≥n para cambiar, y esa raz√≥n deber√≠a ser un cambio en el c√°lculo de la factura para nuestra clase.

Pero en esta arquitectura, si queremos cambiar el formato de impresi√≥n, necesitar√≠amos cambiar la clase. Esta es la raz√≥n por la que no deber√≠amos tener l√≥gica de impresi√≥n mezclada con l√≥gica de negocios en la misma clase.

Hay otro m√©todo que viola el PRU en nuestra clase: el m√©todo guardarArchivo. Tambi√©n es un error extremadamente com√∫n mezclar la l√≥gica de persistencia con la l√≥gica de negocios.

No piense solo en t√©rminos de escribir en un archivo, podr√≠a ser guardarlo en una base de datos, hacer una llamada a la API u otras cosas relacionadas con la persistencia.

Entonces, ¬øc√≥mo podemos arreglar esta funci√≥n de impresi√≥n?, puede preguntar.

Podemos crear nuevas clases para nuestra l√≥gica de impresi√≥n y persistencia, por lo que ya no necesitaremos modificar la clase de factura para esos fines.

Creamos 2 clases, FacturaImpresion y FacturaPersistencia, y movemos los m√©todos.

public class FacturaImpresion {
    private Factura factura;

    public FacturaImpresion(Factura factura) {
        this.factura = factura;
    }

    public void imprimir() {
        System.out.println(factura.cantidad + "x " + factura.libro.nombre + " " + factura.libro.precio + " $");
        System.out.println("Tasa de Descuento: " + factura.tasaDescuento);
        System.out.println("Tasa de Impuesto: " + factura.tasaImpuesto);
        System.out.println("Total: " + factura.total + " $");
    }
}
public class FacturaPersistencia {
    Factura factura;

    public FacturaPersistencia(Factura factura) {
        this.factura = factura;
    }

    public void guardarArchivo(String nombreArchivo) {
        // Crea un archivo con el nombre dado y escribe la factura.
    }
}
Ahora nuestra estructura de clases obedece al principio de responsabilidad √∫nica y cada clase es responsable de un aspecto de nuestra aplicaci√≥n.

`,
        videoUrl: "https://www.youtube.com/watch?v=2X50sKeBAcQ",
    },
    // {
    //     id: 9,
    //     icon: "üìï",
    //     title: "Polimorfismo",
    //     description: "Interfaz √∫nica para diferentes tipos de datos.",
    //     content: ``,
    //     videoUrl: "",
    // },
    // {
    //     id: 10,
    //     icon: "üìó",
    //     title: "Encapsulamiento",
    //     description: "Protege los datos dentro de una clase.",
    //     content: ``,
    //     videoUrl: "",
    // },
];
