// lib/temario.ts

export const temario = [
    {
        id: 1,
        icon: "üìò",
        title: "Clases en Java",
        description: "Aprende a declarar y usar clases en Java.",
        content: `En Java todo est√° encapsulado en clases. La clase es el n√∫cleo del lenguaje Java. Se puede definir como una plantilla que describe los comportamientos y estados de una entidad en particular.
Una clase define un nuevo tipo de datos. Una vez definido, este nuevo tipo se puede utilizar para crear un objeto de ese tipo.

En Java, para declarar una clase se utiliza la palabra clave. Una clase contiene datos y m√©todos que operan con esos datos. Los datos o variables definidos dentro de una clase se denominan variables de instancia y el c√≥digo que opera con estos datos se conoce como m√©todos.

Por lo tanto, las variables y m√©todos de instancia se conocen como miembros de clase.

Reglas para la clase Java:

- Una clase solo puede tener un especificador de acceso p√∫blico o predeterminado (sin modificador).
- Puede ser abstracto, final o concreto (clase normal).
- Debe tener la palabra clave class y la clase debe ir seguida de un identificador legal.
- Opcionalmente, puede extener solo una clase principal. De forma predeterminada, extiende la clase Object.
- Las variables y los m√©todos se declaran dentro de un conjunto de llaves.

Una clase Java puede contener campos, m√©todos, constructores y bloques. Veamos una estructura general de una clase.

Sintaxis de la clase Java

class class_name {
    field;
    method;
}


`,
        videoUrl: "https://www.youtube.com/embed/grEKMHGYyns",
    },
    {
        id: 2,
        icon: "üîí",
        title: "Acceso a miembros",
        description: "Controla el acceso a los atributos y m√©todos.",
        content: `
Los modificadores de acceso en Java controlan el nivel de visibilidad o accesibilidad de clases, m√©todos y variables en un programa. Estos modificadores son esenciales para implementar el principio de encapsulamiento, una de las bases de la programaci√≥n orientada a objetos.

¬øQu√© son los Modificadores de Acceso?

Los modificadores de acceso determinan qu√© partes del programa pueden acceder a una clase, m√©todo o variable. Los modificadores de acceso en Java son:

1. public: El miembro es accesible desde cualqueir lugar del programa.
2. private: El miembro es accesible solo desde dentro de la clase en la que est√° declarado.
3. protected: El miembro es accesible dentro del mismo parquete y por las sublcases, incluso si est√°n en diferentes paquetes.
4. Sin modificador (package-private): Si no se especifica ning√∫n modificador, el miembro es accesible solo dentro del mismo paquete.

Modificador public

El modificador public permite que una clase, m√©todo o variable sea accesible desde cualquier parte del c√≥digo, ya sea dentro del mismo paquete o en paquetes diferentes.

Explicaci√≥n:
El atributo nombre y el m√©todo saludar est√°n declarados como public, por lo que son accesibles desde cualquier clase, incluso desde fuera del paquete donde se encuentran.
Ventajas de public

- Permite el acceso desde cualquier lugar del c√≥digo.
- √ötil cuando necesitas que un m√©todo o atributo sea accesible globalmente.


Consideraciones:

- El uso excesivo de public puede romper el principio de encapsulamiento. Es recomendable utilizarlo solo cuando sea necesario.

Modificador private

El modificador private limita el acceso a la clase en la que se define. Los miembros private no son accesibles fuera de su clase, lo que refuerza el encapsulamiento.

Explicaci√≥n:
- El atributo declarado como private, por lo que no se puede acceder directamente desde fuera de la clase. Sim embargo podemos acceder a √©l mediante el m√©todo p√∫blico.

Ventajas de private
- Protege los datos de accesos no deseados o modificaciones accidentales.
- Refuerza el principio de encapsulamiento.

Consideraciones: 
- Es recomendable declarar los atributos como private y proporcionar m√©todos getter y setter para controlarlos.

Modificador protected
El modificador protected permite que un miembro sea accesible dentro del mismo paquete y en clases que heredan de la clase original, incluso si estas clases est√°n en un paquete diferente.

Explicaci√≥n:
- El atributo nombre est√° declarado como protected, lo que permite que la clase Empleado (subclase de Persona) acceda a √©l a trav√©s de la herencia, aunque est√© en un paquete diferente.

Ventajas de protected
- Proporciona un acceso controlado en las jerarqu√≠as de herencia.
- Es m√°s restrictivo que public, pero menos restrictivo que private.

Consideraciones:
- El acceso protected es √∫til en clases que est√°n destinadas a ser extendidas, pero debes evitar exponer datos sensibles.

Mejores Pr√°cticas en el Uso de Modificadores de Acceso

1. Encapsula siempre que sea posible: Declara los atributos como private y proporciona m√©todos getter y setter para un acceso controlado.
2. Usa protected cuando las clases est√°n dise√±adas para ser extendidas: El acceso protected es √∫til cuando esperas que otras clases hereden y accedan a ciertos miembros.
3. Evita el uso excesivo de public: Exponer demasiados miembros como public puede hacer que el c√≥digo sea m√°s dif√≠cil de mantener y menos seguro.
4. Usa el modificador adecuado seg√∫n el contexto: La elecci√≥n del modificador debe basarse en la necesidad real de visibilidad y en la intenci√≥n de proteger los datos o m√©todos.
`,
        videoUrl: "https://www.youtube.com/embed/8cmx7V4oY0A",
    },
    {
        id: 3,
        icon: "üìò",
        title: "Constructores",
        description: "Crea objetos con constructores personalizados.",
        content: `
Un constructor es un m√©todo especial que se utiliza para inicializar un objeto. Cada clase tiene un constructor, ya sea impl√≠cita o expl√≠citamente.

Si no declaramos un constructor en la clase, JVM crea un constructor predeterminado para esa clase. Esto se conoce como constructor predeterminado.

Un constructor tiene el mismo nombre que el nombre de la clase en la que se declara. El constructor no debe tener ning√∫n tipo de valor devuelto expl√≠cito. El constructor en Java no puede ser abstracto, est√°tico, final o sincronizado. Estos modificadores no est√°n permitidos para el constructor.

Sintaxis para declarar el constructor:

className (parameter-list){
        code-statements
}

className es el nombre de la clase, ya que el nombre del constructor es el mismo que el nombre de la clase.

parameter-list es opcional, ya que los constructores tambi√©n pueden ser parametrizados y no parametrizados.

Ejemplo de constructor

En Java, el constructor estructuralmente se ve como se da en el siguiente programa. Una clase Car tiene un constructor que proporciona valores a las variables de instancia.

class Car
{
    String name;
    Steing model;
    car() //Constructor
    {
        model="";
        name="";
    }
}

ipos de constructor
Java admite dos tipos de constructores:

- Constructor predeterminado
- Constructor parametrizado

Cada vez que se crea un nuevo objeto, se invocar√° al menos un constructor.

onstructor predeterminado
En Java, se dice que un constructor es el constructor predeterminado si no tiene ning√∫n par√°metro. El constructor predeterminado puede ser definido por el usuario o proporcionado por JVM.

Si una clase no contiene ning√∫n constructor, durante el tiempo de ejecuci√≥n, JVM genera un constructor predeterminado que se conoce como constructor predeterminado definido por el sistema.

Si una clase contiene un constructor sin par√°metro, se conoce como constructor predeterminado definido por el usuario. En este caso, JVM no crea un constructor predeterminado.

El prop√≥sito de crear un constructor es inicializar los estados de un objeto.
        `,
        videoUrl: "https://www.youtube.com/watch?v=5EGS6lnghYE",

    },
    {
        id: 4,
        icon: "‚ûï",
        title: "Sobrecarga de Constructores",
        description: "Define m√∫ltiples constructores para flexibilidad.",
        content: `Al igual que los m√©todos, un constructor tambi√©n puede estar sobrecargado. Los constructores sobrecargados se diferencian en funci√≥n de su tipo de par√°metros o n√∫mero de par√°metros. La sobrecarga de constructores no es muy diferente de la sobrecarga de m√©todos. En caso de sobrecarga de m√©todos, tiene varios m√©todos con el mismo nombre pero con diferente firma, mientras que en la sobrecarga de constructores tiene varios constructores con diferente firma, pero la √∫nica diferencia es que el constructor no tiene tipo de retorno.
        
        Ejemplo de sobrecarga de constructores

        class Cricketer
        {
            String name;
            String team;
            int age;
            Cricketer() //contructor por defecto
            {
                name = "";
                team = "";
                age = 0;
            }
            Cricketer(String n, String t, int a) // Sobrecarga de constructor
            {
                name = n;
                team = t;
                age = a;
            }
            Cricketer (Cricketer ckt)
            {
                name = ckt.name;
                team = ckt.team;
                age = ckt.age;
            }
            public String toString()
            {
                return "this is " + name + " of " + team;
            }
        }

        Class test:
        {
            public static void main (String[] args)
            {
                Cricketer c1 = new Cricketer();
                Cricketer c2 = new Cricketer("sachin", "India", 32);
                Cricketer c3 = new Cricketer(c2 );
                System.out.println(c2);
                System.out.println(c3);
                c1.name = "Virat";
                c1.team= "India";
                c1.age = 32;
                System .out. print in (c1);
            }
        }

        Encadenamiento de constructores
El encadenamiento de constructores es un proceso de llamar a un constructor desde otro constructor de la misma clase. Dado que solo se puede llamar al constructor desde otro constructor, se utiliza el encadenamiento de constructores para este prop√≥sito.

Para llamar al constructor desde otro constructor, se utiliza esta palabra clave. Esta palabra clave se utiliza para hacer referencia al objeto actual.

Veamos un ejemplo para entender el encadenamiento de constructores.


    class Test
    {
        Test()
        {
            this(10);
        }
        Test(int x)
        {
            System.out.println("x="+x);
        }
        public static void main(String arg[])
        {
            Test object = new Test();
        }
    }

    El encadenamiento de constructores se utiliza cuando queremos realizar varias tareas creando un solo objeto de la clase.
  
        `,
        videoUrl: "",
    },
    {
        id: 5,
        icon: "üßØ",
        title: "Try-Catch",
        description: "Manejo de excepciones en Java.",
        content: `Los errores durante la ejecuci√≥n de un programa pueden comprometer seriamente su funcionamiento. El manejo de excepciones en Java se convierte en una herramienta fundamental para la gesti√≥n efectiva de estos errores. 
        
        La creaci√≥n de jerarqu√≠as de clases de excepci√≥n representan diversos tipos de errores de manera estructurada y coherente. Adem√°s, mediante la implementaci√≥n de mecanismos como la sobre escritura de m√©todos, los desarrolladores pueden personalizar y adaptar el manejo de excepciones a las necesidades espec√≠ficas de sus aplicaciones, asegurando un flujo controlado y predecible en situaciones de error. En resumen, el manejo de excepciones en Java no solo simplifica la gesti√≥n de errores, sino que tambi√©n promueve una estructura de c√≥digo m√°s organizada y f√°cil de mantener, crucial para el desarrollo de software escalable y robusto en entornos de programaci√≥n complejos y en constante evoluci√≥n.

En el paradigma de la programaci√≥n orientada a objetos, la integridad de los objetos implica la garant√≠a de condiciones preestablecidas, tambi√©n conocidas como estados, tanto antes como despu√©s de la ejecuci√≥n de un m√©todo en respuesta a un mensaje. Antes de responder a un mensaje, un objeto debe encontrarse en un estado consistente y v√°lido seg√∫n las restricciones definidas por la clase. Tras la ejecuci√≥n del m√©todo, el objeto debe mantener su estado coherente en relaci√≥n con las reglas de negocio y las restricciones del sistema. Mediante el uso de conceptos como encapsulaci√≥n, validaci√≥n de datos y abstracci√≥n, los objetos pueden preservar su integridad interna y asegurar la coherencia en su interacci√≥n con otros objetos, promoviendo as√≠ un dise√±o orientado a objetos s√≥lido y f√°ciles de mantener.

En Java, una excepci√≥n es un evento que interrumpe el flujo normal de un programa durante su ejecuci√≥n. Las excepciones se dividen en tres categor√≠as principales:

1. Excepciones comprobadas (checked exceptions):Son aquellas que el compilador obliga a controlar mediante bloques try-catch o declaraciones throws. Estas excepciones suelen estar relacionadas con problemas externos al programa, como la entrada/salida de datos y el manejo de archivos.
2. Excepciones no comprobadas (uncheked exceptions):Son aquellas que el compilador no obliga a controlar. Por lo general, surgen debido a errores en la l√≥gica del programa, como intentos de divisi√≥n entre cero, acceso a √≠ndices fuera de los l√≠mites de un arreglo, entre otros.
3. Errores(errors): Representan problemas graves que surgen en tiempo de ejecuci√≥n y que generalmente est√°n fuera del control del programador. Estos errores no se pueden manejar y generalmetne indican problemas graves en el entorno de ejecuci√≥n, como la falta de memoria.

Un manejador de excepciones se refiere a un bloque de c√≥digo que se utiliza para gestionar y controlar las excepciones que pueden ocurrir durante la ejecuci√≥n de un programa. El manejo de excepciones en Java se logra mediante el uso de bloques try-catch. El bloque try contiene el c√≥digo propenso a generar excepciones, mientras que el bloque catch se utiliza para capturar y manejar esas excepciones.

public class ManejadorExcepcionesEjemplo {
public static void main(String[] args) {
    try {
        int[] arreglo = new int[4];
        System.out.println("Intentando acceder a un √≠ndice inv√°lido del arreglo...");
        int valor = arreglo[5]; // Esto generar√° una excepci√≥n ArrayIndexOutOfBoundsException
    } catch (ArrayIndexOutOfBoundsException e) {
        System.out.println("Se ha producido un error: Acceso a un √≠ndice inv√°lido del arreglo.");
    } finally {
        System.out.println("El bloque finally se ejecuta siempre, independientemente de si hay una excepci√≥n o no.");
    }
 }
}


`,
        videoUrl: "",
    },
    {
        id: 6,
        icon: "üîó",
        title: "Relaciones entre Clases",
        description: "Asocia clases para modelar comportamientos complejos.",
        content: `
En la programaci√≥n orientada a objetos, las **clases** representan cosas o conceptos del mundo real. A veces, estas clases necesitan trabajar juntas o estar conectadas entre s√≠. A eso le llamamos **relaciones entre clases**.

Existen dos relaciones principales:

1. Composici√≥n

Una clase usa a otra como parte de s√≠ misma. Por ejemplo:


class Motor {
        void encender() {
        System.out.println("Motor encendido");
    }
}

class Auto {
    Motor motor = new Motor();

    void arrancar() {
    motor.encender();
}
}
En este caso, un 'Auto' **tiene un** 'Motor'. El motor no vive por s√≠ solo, solo existe dentro del auto.

2. Asociaci√≥n

Una clase se conecta con otra, pero no la contiene. Por ejemplo:


class Profesor {
    String nombre;
}

class Curso {
    Profesor profesor;
}


Aqu√≠, un 'Curso' usa un 'Profesor', pero el profesor no es parte del curso: puede existir por separado y trabajar en otros cursos.

---

¬øPor qu√© es √∫til esto?

* Ayuda a dividir problemas grandes en partes peque√±as y f√°ciles de manejar.
* Permite reutilizar c√≥digo.
* Hace que tus programas sean m√°s organizados y realistas.

`,
        videoUrl: "",
    },
    {
        id: 7,
        icon: "üë™",
        title: "Herencia simple",
        description: "Hereda comportamientos de clases base.",
        content: `La herencia es una de las caracter√≠sticas clave de la Programaci√≥n Orientada a Objetos. La herencia proporcionaba un mecanismo que permit√≠a a una clase heredar la propiedad de otra clase. Cuando una clase extiende otra clase, hereda todos los miembros no privados, incluidos los campos y los m√©todos. La herencia en Java se puede entender mejor en t√©rminos de relaci√≥n padre e hijo, tambi√©n conocida como superclase (padre) y subclase (hijo) en el lenguaje Java.

La herencia define como una relaci√≥n entre una clase Super y su Sub clase. y las palabras clave se utilizan para describir la herencia en Java.extendsimplements


Veamos c√≥mo se usa la palabra clave extends para lograr la herencia. Muestra la relaci√≥n de superclase y subclase.

class Vehicle
{
    ......
}
class Car extends Vehicle
{
    .......    //extends the property of vehicle class
}

Ahora, basado en el ejemplo anterior. En t√©rminos de POO podemos decir que,

- El veh√≠culo es una s√∫per clase de coche.
- El autom√≥vil es una subclase de veh√≠culo.
- Coche IS-A Veh√≠culo.

Finalidad de la herencia
- Promueve la reutilizabilidad del c√≥digo, es decir, los mismos m√©todos y variables que se definen en una clase padre/super/base se pueden usar en la clase hija/sub/derivada.
- Promueve el polimorfismo al permitir la anulaci√≥n del m√©todo.

Desventajas de la herencia
- La principal desventaja de usar la herencia es que las dos clases (clase principal y secundaria) se acoplan estrechamente.
- Esto significa que si cambiamos el c√≥digo de la clase padre, afectar√° a todas las clases hijas que heredan/derivan la clase padre y, por lo tanto, no pueden ser independientes entre s√≠.

Ejemplo sencillo de Herencia
Antes de seguir adelante tomemos un ejemplo r√°pido y tratemos de entender mejor el concepto de Herencia:

class Parent
{
    public void p1()
    {
        System.out.println("Parent method");
    }
}
public class Child extends Parent {

    public void c1()
    {
        System.out.println("Child method");
    }
    public static void main(String[] args)
    {
        Child cobj = new Child();
        cobj.c1();  //method of Child class
        cobj.p1();  //method of Parent class
    }
}

En el c√≥digo anterior tenemos una clase Parent que tiene un m√©todo . A continuaci√≥n, creamos una nueva clase Child que hereda la clase Parent utilizando la palabra clave y define su propio m√©todo . Ahora, en virtud de la herencia, la clase Child tambi√©n puede acceder al m√©todo de la clase Parent.p1()extendsc1()publicp1()

Tipos de herencia
Java admite principalmente solo tres tipos de herencia que se enumeran a continuaci√≥n.

1. Herencia √∫nica
2. Herencia multinivel
3. Herencia jer√°rquica
`,
        videoUrl: "",
    },
    {
        id: 8,
        icon: "üß©",
        title: "Composici√≥n",
        description: "Usa clases como componentes internos de otras.",
        content: ``,
        videoUrl: "",
    },
    {
        id: 9,
        icon: "üåÄ",
        title: "Polimorfismo",
        description: "Interfaz √∫nica para diferentes tipos de datos.",
        content: `El polimorfismo es uno de los pilares fundamentales de la Programaci√≥n Orientada a Objetos (POO), junto con la herencia y el encapsulamiento. En Java, el polimorfismo permite que un objeto de una clase se comporte de diferentes maneras dependiendo del contexto.

El polimorfismo mejora la flexibilidad y reutilizaci√≥n del c√≥digo, lo que hace que los programas sean m√°s extensibles y f√°ciles de mantener.

El polimorfismo significa ‚Äúmuchas formas‚Äù, y en Java, se refiere a la capacidad de un objeto de adoptar diferentes formas. A trav√©s de la herencia y la sobrescritura de m√©todos, un objeto puede comportarse de diferentes maneras seg√∫n su tipo en tiempo de ejecuci√≥n. Hay dos tipos principales de polimorfismo en Java:

1. Polimorfismo en tiempo de compilaci√≥n (sobrecarga): Ocurre cuando se define m√°s de un m√©todo con el mismo nombre pero diferentes par√°metros dentro de una clase.
2. Polimorfismo en tiempo de ejecuci√≥n (sobrescritura): Se refiere a la capacidad de un m√©todo sobrescrito para ser invocado en tiempo de ejecuci√≥n seg√∫n el tipo del objeto.

Diferencia entre Sobrecarga y Sobrescritura
- Sobrecarga: El m√©todo tiene el mismo nombre pero diferentes par√°metros dentro de la misma clase (polimorfismo en tiempo de compilaci√≥n).
- Sobrescritura: Una subclase redefine un m√©todo heredado de la superclase con la misma firma (polimorfismo en tiempo de ejecuci√≥n).

Polimorfismo en Tiempo de Ejecuci√≥n
En Java, el polimorfismo en tiempo de ejecuci√≥n se logra a trav√©s de la sobrescritura de m√©todos. Un objeto de una subclase puede ser tratado como si fuera de su superclase, pero el comportamiento que adopta depender√° de la clase real del objeto en tiempo de ejecuci√≥n.

// Superclase
class Animal {
    public void hacerSonido() {
        System.out.println("El animal hace un sonido.");
    }
}

// Subclase 1
class Perro extends Animal {
    @Override
    public void hacerSonido() {
        System.out.println("El perro ladra.");
    }
}

// Subclase 2
class Gato extends Animal {
    @Override
    public void hacerSonido() {
        System.out.println("El gato ma√∫lla.");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal animal1 = new Perro(); // Polimorfismo
        Animal animal2 = new Gato();  // Polimorfismo

        animal1.hacerSonido(); // Llama al m√©todo de la clase Perro
        animal2.hacerSonido(); // Llama al m√©todo de la clase Gato
    }
}

Explicaci√≥n:
- Animal: Es la superclase que define un m√©todo gen√©rico hacerSonido().
- Perro y Gato: Son subclases que sobrescriben el m√©todo hacerSonido() con un comportamiento espec√≠fico.
- Polimorfismo: Los objetos animal1 y animal2 son de tipo Animal, pero en tiempo de ejecuci√≥n, se comportan seg√∫n sus clases concretas (Perro y Gato).

Ventajas del Polimorfismo
- Flexibilidad: Puedes escribir c√≥digo que trabaje con la superclase, pero en tiempo de ejecuci√≥n, los objetos se comportar√°n seg√∫n su clase real.
- Reutilizaci√≥n de C√≥digo: Evita la duplicaci√≥n de c√≥digo, ya que las subclases pueden sobrescribir el comportamiento sin reescribir todo el c√≥digo de la superclase.
- Extensibilidad: Facilita la ampliaci√≥n del sistema, ya que puedes agregar nuevas clases sin cambiar el c√≥digo existente que utiliza la superclase.
`,
        videoUrl: "",
    },
    {
        id: 10,
        icon: "üîê",
        title: "Encapsulamiento",
        description: "Protege los datos dentro de una clase.",
        content: `El encapsulamiento en Java es el proceso de ocultar los detalles internos de una clase y exponer solo lo necesario a trav√©s de m√©todos p√∫blicos. Este principio permite proteger los datos sensibles y asegurar que los objetos se utilicen de manera controlada y predecible.

Beneficios del Encapsulamiento
1. Control sobre el acceso a los datos: Los datos sensibles est√°n protegidos y solo pueden ser modificados a trav√©s de m√©todos controlados.
2. Facilidad para realizar cambios internos: Puedes cambiar la implementaci√≥n interna de una clase sin afectar el c√≥digo externo.
3. Mantenimiento y depuraci√≥n m√°s sencilla: El encapsulamiento hace que el c√≥digo sea m√°s f√°cil de mantener y depurar, ya que los errores tienden a estar confinados dentro de la clase.

Implementaci√≥n del Encapsulamiento en Java

El encapsulamiento en Java se logra mediante:
1. Declarar los atributos como private: Esto restringe el acceso directo a los atributos desde fuera de la clase.
2. Proveer m√©todos p√∫blicos getter y setter: Estos m√©todos controlan c√≥mo se accede y modifica el valor de los atributos.

Ejemplo B√°sico de Encapsulamiento:

public class Persona {
    // Atributos privados
    private String nombre;
    private int edad;

    // Constructor
    public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
    }

    // M√©todo getter para acceder al atributo nombre
    public String getNombre() {
        return nombre;
    }

    // M√©todo setter para modificar el atributo nombre
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    // M√©todo getter para acceder al atributo edad
    public int getEdad() {
        return edad;
    }

    // M√©todo setter para modificar el atributo edad
    public void setEdad(int edad) {
        if (edad > 0) {
            this.edad = edad;
        } else {
            System.out.println("La edad no puede ser negativa.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Persona persona = new Persona("Carlos", 30);

        // Acceso a trav√©s de los m√©todos getter
        System.out.println("Nombre: " + persona.getNombre());
        System.out.println("Edad: " + persona.getEdad());

        // Modificaci√≥n a trav√©s de los m√©todos setter
        persona.setNombre("Ana");
        persona.setEdad(28);

        System.out.println("Nuevo nombre: " + persona.getNombre());
        System.out.println("Nueva edad: " + persona.getEdad());
    }
}


Explicaci√≥n del Ejemplo

- Los atributos nombre y edad est√°n declarados como private, lo que impide que se acceda a ellos directamente desde fuera de la clase Persona.
- Los m√©todos getter (getNombre() y getEdad()) permiten acceder a los valores de estos atributos.
- Los m√©todos setter (setNombre() y setEdad()) controlan c√≥mo se modifican los atributos. En el caso del m√©todo setEdad(), se agrega una validaci√≥n para asegurarse de que la edad no sea negativa.

¬øPor qu√© Usar M√©todos Getter y Setter?
El uso de getter y setter es una forma com√∫n de aplicar el principio de encapsulamiento en Java. Estos m√©todos ofrecen control sobre el acceso a los atributos privados, permitiendo la validaci√≥n de los datos antes de ser asignados.

Encapsulamiento en Clases Complejas
El encapsulamiento tambi√©n es esencial en clases m√°s complejas, donde varios atributos dependen unos de otros. Al proporcionar un acceso controlado a los datos, puedes garantizar que el estado del objeto siempre sea consistente.

Ejemplo complejo de encapsulamiento:

public class Coche {
    private String marca;
    private String modelo;
    private int a√±o;
    private int velocidad;

    // Constructor
    public Coche(String marca, String modelo, int a√±o) {
        this.marca = marca;
        this.modelo = modelo;
        this.a√±o = a√±o;
        this.velocidad = 0; // Velocidad inicial es 0
    }

    // Getter y Setter para marca
    public String getMarca() {
        return marca;
    }

    public void setMarca(String marca) {
        this.marca = marca;
    }

    // Getter y Setter para modelo
    public String getModelo() {
        return modelo;
    }

    public void setModelo(String modelo) {
        this.modelo = modelo;
    }

    // Getter para a√±o (sin setter, ya que no deber√≠a cambiarse)
    public int getA√±o() {
        return a√±o;
    }

    // M√©todo para aumentar la velocidad
    public void acelerar(int incremento) {
        if (incremento > 0) {
            this.velocidad += incremento;
            System.out.println("Velocidad actual: " + velocidad + " km/h");
        } else {
            System.out.println("El incremento debe ser positivo.");
        }
    }

    // M√©todo para frenar el coche
    public void frenar(int decremento) {
        if (decremento > 0 && this.velocidad >= decremento) {
            this.velocidad -= decremento;
            System.out.println("Velocidad actual: " + velocidad + " km/h");
        } else {
            System.out.println("El decremento debe ser positivo y menor que la velocidad actual.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Coche miCoche = new Coche("Toyota", "Corolla", 2021);

        miCoche.acelerar(50); // Aumenta la velocidad
        miCoche.frenar(20);   // Reduce la velocidad

        // Acceso a la marca y modelo
        System.out.println("Marca: " + miCoche.getMarca());
        System.out.println("Modelo: " + miCoche.getModelo());
    }
}

Explicaci√≥n del ejemplo:
- El acceso a los atributos marca, model y a√±o est√° controlado a trav√©s de m√©todos getter y setter. El atributo a√±o no tiene un setter, ya que el a√±o de fabricaci√≥n de un coche no deber√≠a cambiar.
- Los m√©todos acelerar() y frenar() proporcionana una interfaz controlada para modificar la velocidad del coche, con validaciones para evitar comportamientos inesperados.

Encapsulamiento y Modificadores de Acceso
El encapsulamiento en Java est√° estrechamente relacionado con los modificadores de acceso. Como vimos en el art√≠culo anterior, los modificadores de acceso como private, protected y public determinan qu√© partes de tu programa pueden acceder a los miembros de una clase.

- private: Los atributos y m√©todos declarados como private solo son accesibles dentro de la propia clase, lo que refuerza el principio de encapsulamiento.
- protected y public: Aunque no son tan restrictivos como private, a√∫n permiten cierto grado de control sobre c√≥mo se accede a los datos.


Buenas Pr√°cticas en el Encapsulamiento
1. Mant√©n los atributos privados: Siempre que sea posible, declara los atributos como private y proporciona m√©todos getter y setter para acceder a ellos.
2. Valida los valores en los setters: Aprovecha los m√©todos setter para asegurarte de que los valores asignados sean v√°lidos.
3. Evita exponer datos innecesarios: No todos los atributos necesitan ser accesibles o modificables desde fuera de la clase. Eval√∫a cu√°les son realmente necesarios.
`,
        videoUrl: "",
    },
];
